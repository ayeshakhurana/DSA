#include<stdio.h>
#define MAX 100
int graph[MAX][3],parent[MAX];
int find(int i){
    if(parent[i]!=i){
        i=parent[i];
    }
    return i;
}
void uniona(int u, int v){
    int a=find(u);
    int b=find(v);
    parent[a]=b;
}
void kruskal(int E){
    int total=0;
    printf("nodes in minimal spanning tree are: \n");
    for(int i=0;i<E;i++){
        int u=graph[i][0]; //src
        int v=graph[i][1]; //dest
        int w=graph[i][2]; //weight
        if(find(u)!=find(v)){
            printf("%d--%d = %d",u,v,w);
            total+=w;
            uniona(u,v);
        }
    }
    printf("total weight i: %d\n",total);
}
int main(){
    int V,E;
    printf("enter the number of vertices and edges: ");
    scanf("%d %d",&V,&E);
    for(int i=0;i<E;i++){
        printf("enter source node, destination node and weight of the edge: ");
        scanf("%d %d %d",&graph[i][0],&graph[i][1],&graph[i][2]);
    }
    for(int i=0;i<V;i++){
        parent[i]=i;
    }
    for(int i=0;i<E-1;i++){
        for(int j=0;j<E-i-1;j++){
            if(graph[j][2] > graph[j+1][2]){
                int temp[3]={graph[j][0],graph[j][1],graph[j][2]};
                graph[j][0]=graph[j+1][0];
                graph[j][1]=graph[j+1][1];
                graph[j][2]=graph[j+1][2];
                graph[j+1][0]=temp[0];
                graph[j+1][1]=temp[1];
                graph[j+1][2]=temp[2];
            }
        }
    }
    kruskal(E);
    return 0;
}
