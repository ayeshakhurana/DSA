#include<stdio.h>
#define MAX 100
int visited[MAX],graph[MAX][MAX];
typedef struct queues{
    int data[MAX];
    int front,rear;
}queue;
void init_queue(queue*  q){
    q->front=q->rear=-1;
}
int isempty(queue* q){
    return q->front==-1;
}
void enqueue(queue* q,int val){
    if(q->rear < MAX-1){
        if(q->front==-1){
            q->front=0;
        }
        q->data[++(q->rear)]=val;
    }
}
int dequeue(queue* q){
    int val;
    if(!isempty(q)){
        val=q->data[q->front];
        if(q->rear==0){
            q->front=q->rear=-1;
        }else{
            q->front++;
        }
    }
    return val;
}
void bfs(int start, int V){
    queue q;
    init_queue(&q);
    enqueue(&q,start);
    visited[start]=1;
    printf("BFS traversal: \n");
        while(!isempty(&q)){
            int node=dequeue(&q);
            printf("%d \n",node);
            for(int i=0;i<V;i++){
            if(graph[node][i]==1 && visited[i]==0){
                enqueue(&q,i);
                visited[i]=1;
            }
            }
    }
}
int main(){
    int V,E;
    int src,dest,start;
    printf("enter number of vertices and edges: ");
    scanf("%d %d",&V,&E);
    for(int i=0;i<V;i++){
        visited[i]=0;
    }
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            graph[i][j]=0;
        }
    }
    for(int i=0;i<E;i++){
        printf("enter source node and destination node of %d edge: ",i+1);
        scanf("%d %d",&src,&dest);
        graph[src][dest]=1;
    }
    printf("enter the starting node: ");
    scanf("%d",&start);
    bfs(start,V);
    return 0;
}
